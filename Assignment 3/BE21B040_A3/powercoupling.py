# -*- coding: utf-8 -*-
"""powerCoupling.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NaBEUhcHc-Kin21KU8I7AW1o_g6jTVoN
"""

import numpy as np
import scipy
from scipy.integrate import odeint
import matplotlib.pyplot as plt

############################## Initialisation ##############################

# Defining variables
meu = 1
omega1 = 5
omega2 = 15
A = 0.2
phi_deg = [-47, 98]
t = np.linspace(0, 100, 10000)

############################## Function Definitions ##############################

# Defining the system of ODEs
def p_system(y, t, meu, omega1, omega2, A, phi):
    r1, r2, theta1, theta2, psi= y
    dr1dt = (meu - np.square(r1))*r1 + (A*(np.power(r2, (omega1/omega2))*np.cos(omega1*(theta2/omega2 - theta1/omega1 + phi/(omega1*omega2)))))
    dr2dt = (meu - np.square(r2))*r2 + (A*(np.power(r1, (omega2/omega1))*np.cos(omega2*(theta1/omega1 - theta2/omega2 - phi/(omega1*omega2)))))
    dtheta1dt = omega1 + (A*(np.power(r2, (omega1/omega2))/r1)*(np.sin(omega1*(theta2/omega2 - theta1/omega1 + phi/(omega1*omega2)))))
    dtheta2dt = omega2 + (A*(np.power(r1, (omega2/omega1))/r2)*(np.sin(omega2*(theta1/omega1 - theta2/omega2 - phi/(omega1*omega2)))))
    dpsidt = ((A*(np.power(r2, (omega1/omega2))))/(omega1*r1)) * np.sin(omega1*(phi/(omega1*omega2) - psi)) + ((A*(np.power(r1, (omega2/omega1))))/(omega2*r2)) * np.sin(omega2*(phi/(omega1*omega2) - psi))
    return [dr1dt, dr2dt, dtheta1dt, dtheta2dt, dpsidt]

# Defining function to extract solutions after solving the differential eqs
def extractSol(sol):
    psi = sol[:, 2]/omega1 - sol[:, 3]/omega2
    psi_values = sol[:, 4]
    return [psi,psi_values]

# Defining function to plot oscillator response over time
def plotComplexCoupling(psi,psi_values,phi,deg):
    dpsidt_values = np.gradient(psi_values, t)

    # Calculate the expression for sigma, i.e. theta2/w2 - theta1/w1 + phi/(w1*w2)
    expr = psi - phi/(omega1*omega2)

    # Plot normalized phase difference
    plt.figure()
    plt.title(f"For a normalized phase difference of ${phi_deg[deg]}\degree$ or {np.radians(phi_deg[deg]).round(4)} radians")
    plt.plot(t, psi, label='Normalized phase difference',color='hotpink')
    plt.grid()
    plt.xlabel('Time(t)')
    plt.ylabel(chr(936))
    plt.legend()
    plt.show()

    # Plot the expression theta2/w2 - theta1/w1 + phi/(w1*w2)
    plt.figure()
    plt.title(f"For a normalized phase difference of ${phi_deg[deg]}\degree$ or {np.radians(phi_deg[deg]).round(4)} radians")
    plt.plot(t, expr ,label ='$\sigma$', color='turquoise')
    plt.legend()
    plt.xlabel('Time')
    plt.ylabel('$\sigma$')
    plt.grid()
    plt.show()

############################## Solving ODEs and ploting the oscillator response ##############################

# Solving the ODEs
phi1 = np.radians(phi_deg[0])
phi2 = np.radians(phi_deg[1])
y01 = [0.5, 1, 0.5, 0, np.round(phi1/75)]  # Initial conditions for r1, theta1, r2, theta2
y02 = [0.5, 1, 0.5, 0, np.round(phi2/75)]  # Initial conditions for r1, theta1, r2, theta2
sol1 = odeint(p_system, y01, t, args=(meu, omega1, omega2, A, phi1))
sol2 = odeint(p_system, y02, t, args=(meu, omega1, omega2, A, phi2))

# For Phase difference of -47 deg
psi,psi_values= extractSol(sol1)
plotComplexCoupling(psi,psi_values,phi1,0)

# For Phase difference of 98 deg
psi,psi_values= extractSol(sol2)
plotComplexCoupling(psi,psi_values,phi2,1)