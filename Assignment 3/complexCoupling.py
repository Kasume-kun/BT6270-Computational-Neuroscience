# -*- coding: utf-8 -*-
"""hopf.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16oPggkZMKEFC-Y8WuAF7PwTem8dRpltM
"""

import numpy as np
import scipy
from scipy.integrate import odeint
import matplotlib.pyplot as plt

############################## Initialisation ##############################

# Defining variables
meu = 1
omega1 = 5
omega2 = 5
A = 0.2
y0 = [0.5, 1, 0.5, 0] # Initial conditions for r1, theta1, r2, theta2
phi_deg = [-47, 98]
t = np.linspace(0, 20, 1000)

############################## Function Definitions ##############################

# Defining the system of ODEs
def system(y, t, meu, omega1, omega2, A, phi):
    r1, theta1, r2, theta2 = y
    dr1dt = (meu - np.square(r1)) * r1 + A * r2 * np.cos(theta2 - theta1 + phi)
    dr2dt = (meu - np.square(r2)) * r2 + A * r1 * np.cos(theta1 - theta2 - phi)
    dtheta1dt = omega1 + (A * (r2 / r1) * (np.sin(theta2 - theta1 + phi)))
    dtheta2dt = omega2 + (A * (r1 / r2) * (np.sin(theta1 - theta2 - phi)))
    return [dr1dt, dtheta1dt, dr2dt, dtheta2dt]

# Defining function to extract solutions after solving the differential eqs
def extractSol(sol):
    r1 = sol[:, 0]
    theta1 = sol[:, 1]
    r2 = sol[:, 2]
    theta2 = sol[:, 3]
    return [r1,theta1,r2,theta2]

# Defining function to plot oscillator response over time
def plotComplexCoupling(r1,theta1,r2,theta2,deg):
    theta_diff = theta1 - theta2
    real_z1 = r1 * np.cos(theta1)
    real_z2 = r2 * np.cos(theta2)

    # Plot real(z) vs t
    fig= plt.figure()
    plt.subplot(2, 1, 1)
    plt.title(f"For a phase difference of ${phi_deg[deg]}\degree$ or {np.radians(phi_deg[deg]).round(4)} radians")
    plt.plot(t, real_z1, label='real(z1)',color='turquoise')
    plt.plot(t, real_z2, label='real(z2)',color='hotpink')
    plt.xlim([0, 20])
    plt.ylim([-2, 2])
    plt.xlabel('Time (t)')
    plt.ylabel('real(z)')
    plt.yticks()
    plt.xticks()
    plt.grid()
    plt.legend()
    plt.show()

    # Plot theta_diff
    plt.subplot(2, 1, 2)
    plt.plot(t, theta_diff, label='phase difference', color='hotpink')
    plt.title(f"For a phase difference of ${phi_deg[deg]}\degree$ or {np.radians(phi_deg[deg]).round(4)} radians")
    plt.legend()
    plt.grid()
    plt.xlabel('Time')
    plt.ylabel(r'$\Theta_1$ - $\Theta_2$')
    plt.show()

############################## Solving ODEs and ploting the oscillator response ##############################

# Solving the ODEs
phi1 = np.radians(phi_deg[0])
phi2 = np.radians(phi_deg[1])
sol1 = odeint(system, y0, t, args=(meu, omega1, omega2, A, phi1))
sol2 = odeint(system, y0, t, args=(meu, omega1, omega2, A, phi2))

# For Phase difference of -47 deg
r1, theta1, r2, theta2 = extractSol(sol1)
plotComplexCoupling(r1,theta1,r2,theta2,0)

# For Phase difference of 98 deg
r1, theta1, r2, theta2 = extractSol(sol2)
plotComplexCoupling(r1,theta1,r2,theta2,1)